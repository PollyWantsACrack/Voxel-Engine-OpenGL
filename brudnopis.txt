if (i < 16*16)
			{


				
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(0.0f);


							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(0.0f); vertices.push_back(0.0f);


							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(0.0f);


							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(0.0f);


							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(1.0f);


							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(1.0f); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16); vertices.push_back(0.0f); vertices.push_back(0.0f); vertices.push_back(1.0f);

			}
			if (i < 16 * 16*128)
			{
				


							// Front face
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(0.0f);

							// Back face
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(0.0f);

							// Left face
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(0.0f);

							// Right face
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(0.0f);

							// Bottom face
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(0.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(1.0f);

							// Top face
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(1.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(1.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(1.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(1.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(0.0f);
							vertices.push_back(0.0f + i % 16); vertices.push_back(1.0f + i / 16 * 16); vertices.push_back(0.0f + (i / 16) % 16); vertices.push_back(0.0f); vertices.push_back(1.0f);

			}




			for (int i = 0; i < vertices.size();i++)
		{
			std::cout << vertices[i] << " to wiercholek nr " << i << "\n";
	
	}


	glm::vec3 posPrediction;
			posPrediction = cameraPos + cameraSpeed * glm::vec3(cameraFront.x, 0, cameraFront.z);
			if (posPrediction.x >= -0.5f)
			{
				cameraPos += cameraSpeed * glm::vec3(0, 0, cameraFront.z);
				break;
			}
			else {
				cameraPos += cameraSpeed * glm::vec3(cameraFront.x,0,cameraFront.z);
				break;
			}



	z czym nie poradizlem sobie sam i wykorzytaslem AI:

	1. odszyforwnaie pozychj bloku na podstaiwe tablicy 1d :
	blocks[x + (y+1)*16 * 16 + z*16].blockType == 1
	2. dlaczego szescina pomimo nacisnieca usuwnaia i pomimo posiadnaia typu 0 wciaz sie genrował :
	zamiana z : glbuffersubdata...(wina lezala w tym ze wierhcolki s e nie w peolni aktualizowaly ) na glBufferData(GL_ARRAY_BUFFER, chunkptr->vertices.size() * sizeof(float), chunkptr->vertices.data(), GL_DYNAMIC_DRAW);
	3. dlaczego kiedy bylen na szczycie kolumny i chcialem tam postawic blok to sie nie stawiał:
	przeniesieni generownai srodkow szescianu na poczatek petli generate vertices -- nie dlao sie stawiac poniewaz szesciany z warotscia 0 byly z gory pomijane przze progrma wiec ich srodki nie zostaly wygenerownae
